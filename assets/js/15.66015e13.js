(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{590:function(n,i,e){n.exports=e.p+"assets/img/leetcode_123_1.8cca43a3.jpg"},613:function(n,i,e){"use strict";e.r(i);var t=e(17),a=Object(t.a)({},(function(){var n=this,i=n.$createElement,t=n._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("blockquote",[t("p",[n._v("题目描述")])]),n._v(" "),t("p",[n._v("给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。")]),n._v(" "),t("blockquote",[t("p",[n._v("例1")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("输入：prices = [3,3,5,0,0,3,1,4]\n输出：6\n解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\n随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候 卖出，这笔交易所能获得利润 = 4-1 = 3 。\n")])])]),t("blockquote",[t("p",[n._v("例2")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("输入：prices = [1,2,3,4,5]\n输出：4\n解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   \n注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出.因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n")])])]),t("blockquote",[t("p",[n._v("例3")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("输入：prices = [7,6,4,3,1] \n输出：0 \n解释：在这个情况下, 没有交易完成, 所以最大利润为 0。\n")])])]),t("p",[n._v("思路：我们可做的交易数为0，1，2，也就是说最多可以做两笔交易。那么我们可以以第i天为界，计算出[0 - i]最大收益数和[i - n]最大收益数之和，得到的结果就是我们想要的答案。")]),t("div",{attrs:{align:"center"}},[t("img",{attrs:{src:e(590)}})]),t("p"),n._v(" "),t("p",[n._v("附上代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("//123.买卖股票的最佳时机 III\npublic int maxProfit(int[] prices) {\n    int ans = 0;\n    int len = prices.length;\n    //前i + 1天所能得到的最大收益\n    int[] beforeProfits = new int[len];\n    int min = prices[0],max = prices[0];\n    for (int i = 1; i < len; i++) {\n        min = Math.min(min,prices[i]);\n        max = Math.max(max,prices[i]);\n        beforeProfits[i] = Math.max(beforeProfits[i - 1],prices[i] - min);\n    }\n    min = prices[len - 1];\n    max = prices[len - 1];\n    //后n - i天所能得到的最大收益\n    int[] afterProfits = new int[len];\n    for (int i = len - 2; i >= 0; i--) {\n        min = Math.min(min,prices[i]);\n        max = Math.max(max,prices[i]);\n        afterProfits[i] = Math.max(afterProfits[i + 1],max - prices[i]);\n    }\n    for (int i = 0; i < len; i++) {\n        ans = Math.max(ans,beforeProfits[i] + afterProfits[i]);\n    }\n    return ans;\n}\n")])])])])}),[],!1,null,null,null);i.default=a.exports}}]);