(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{610:function(t,e,r){"use strict";r.r(e);var n=r(17),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("blockquote",[r("p",[t._v("函数式编程是一种编程范式，区别于面向对象编程和面向过程编程的命令风格，其风格是声明式的，是满足若干要素的构建软件的方式。")])]),t._v(" "),r("p",[t._v("函数式编程由纯函数的组合构成，以避免共享状态、可变数据以及副作用。理解函数式编程的第一步就是要理解什么是纯函数。")]),t._v(" "),r("p",[t._v("所谓纯函数就是那种对于给定输入总是得出固定输出且不产生任何副作用的函数。纯函数是函数的一种类型，一个函数的目的可以是值映射，一系列步骤的组合或者是同系统中的其他模块通信。纯函数总是和值映射相关，一个参数，一个固定输出。比如Math.max(11,13)无论被调用多少次，什么时候调用，其结果都是13。而且因为该函数不存在将值存盘或者输出到标准输出上的行为，理论上来说，只要Math.max(11,13)出现的地方，都可以用13去代替。即所谓的引用透明性(referential transparency)。Math.random(),System.currentTime()不是纯函数，因为它们不满足一个输入对应一个输出的原则。")]),t._v(" "),r("p",[t._v("纯函数用副本实现不可变性的。区别于全拷贝，它将数据分成一个个很小的块，只对变化的块进行复制，很象git管理库和提交的方式。基于不可变性，纯函数也不会修改任何外部状态。")]),t._v(" "),r("p",[t._v("纯函数不修改外部状态避免了共享状态，也意味着不会产生任何副作用。在共享状态下，并发/并行过程 + 可变状态 = 不确定性，一个不确定的系统结果是无法预测的，可能会产生各种奇奇怪怪的bug，纯函数可以帮助我们避免这种bug。")]),t._v(" "),r("p",[t._v("函数组合就是将两个以上的函数以某种顺序组合成一个函数的过程，一个函数就像是一个管道，我们的数据就在这一系列的管道中流过。基于这种风格，我们可以减少中间变量的使用。")]),t._v(" "),r("p",[t._v("函数式编程倾向于重用一组通用的函数式实用程序来处理数据。面向对象的编程倾向于将方法和数据放在对象中。那些并置的方法只能对它们设计用于操作的数据类型进行操作，并且通常只能对包含在该特定对象实例中的数据进行操作。在函数式编程中，任何类型的数据都是平等的。相同的 map()实用程序可以映射对象、字符串、数字或任何其他数据类型，因为它将函数作为参数来适当地处理给定的数据类型。函数式编程使用高阶函数实现了它的通用实用技巧。")]),t._v(" "),r("p",[t._v("更加具体清晰的functional programming说明可以参考Eric Elliott的文章"),r("a",{attrs:{href:"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0",target:"_blank",rel:"noopener noreferrer"}},[t._v("Master the JavaScript Interview: What is Functional Programming?"),r("OutboundLink")],1),t._v(",以及Russ Olsen的演讲"),r("a",{attrs:{href:"https://www.youtube.com/watch?v=0if71HOyVjY",target:"_blank",rel:"noopener noreferrer"}},[t._v("Functional Programming in 40 Minutes"),r("OutboundLink")],1),t._v("。")])])}),[],!1,null,null,null);e.default=a.exports}}]);