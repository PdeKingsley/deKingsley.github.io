(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{585:function(t,e,i){t.exports=i.p+"assets/img/git_reflog2.217694c5.png"},586:function(t,e,i){t.exports=i.p+"assets/img/git_reflog1.ec3fd743.png"},587:function(t,e,i){t.exports=i.p+"assets/img/git_reflog3.27fac96c.png"},607:function(t,e,i){"use strict";i.r(e);var s=i(17),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("今日偶然发现了一个叫oh shit,Git!?的网站，里面的内容很有意思，让我们一一来看网站作者到底给我们分享了哪些小tip。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当我们在某一次提交之后导致一些东西被误删或者误加，亦或者是一次失败的merge污染了我们的本地仓库之后，我们有两条命令能够帮助我们逃离这样的窘境。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(" git reflog\n git reset HEAD@{index}\n")])])])])]),t._v(" "),s("p",[t._v("试一试吧，我们首先init一个仓库，创建一个readme文件并且提交，之后我们执行"),s("code",[t._v("git log")]),t._v("，我们会看到两次提交都会给我们显示出来。")]),t._v(" "),s("p",[s("img",{attrs:{src:i(585),alt:"reflog2"}})]),t._v(" "),s("p",[t._v("过了一会，我们又出于某不知名原因，不想要readme文件了。执行"),s("code",[t._v("git reflog")]),t._v("，可以看到如下的操作信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:i(586),alt:"ref1"}})]),t._v(" "),s("p",[t._v("我们执行"),s("code",[t._v("git reset HEAD@{4}")]),t._v(",再执行"),s("code",[t._v("git log")]),t._v(",我们可以看到只剩下init这一条commit信息了。")]),t._v(" "),s("p",[s("img",{attrs:{src:i(587),alt:"reflog3"}})]),t._v(" "),s("p",[t._v("我们成功的让仓库回到了没有readme文件的状态，perfect！其实这里只是举个简单的例子，像如上这种需求，完全没必要这么做。但在复杂场景下，这么做可比一个文件一个文件的检查方便多了。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("当我们的上一个提交需要一些变动时，或者是修改它的提交信息，又不想产生新的提交时，下面的两条命令可以帮助我们做到这一切。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(" git commit --amend --no-edit\n git commit --amend\n")])])])])]),t._v(" "),s("p",[t._v("没啥好说的，用就完了。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("当我们将修改提交到错误的分支上时应该怎么补救呢？有两种可行方式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(" #第一种\n git reset HEAD~ --soft\n git stash\n git checkout right_branch\n git add .\n git commit -m\n #第二种\n git checkout right_branch\n git cherry-pick master\n git checkout master\n git reset HEAD~ --hard\n")])])])])]),t._v(" "),s("p",[t._v("两种方式都有效，选择哪个可自行判断。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[s("code",[t._v("git diff")]),t._v("显示的是未放入暂存区的文件的差异,"),s("code",[t._v("git diff --staged")]),t._v("才是放入暂存区的文件的差异。")])]),t._v(" "),s("li",[s("p",[t._v("当想要将之前隔了几个提交的那个提交所作的改动还原，可以通过"),s("code",[t._v("git log")]),t._v("得到那次提交的hashcode，之后执行"),s("code",[t._v("git revert [hashcode]")]),t._v("就ok了。")])]),t._v(" "),s("li",[s("p",[t._v("如果我们只想还原某个文件的变动，执行"),s("code",[t._v("git checkout [hashcode] -- filepath")]),t._v("即可。")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);